import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useSignup } from "@/services/auth/signup";
import { Link, useNavigate } from "react-router";
import { toast } from "sonner";
import axios from "axios";

const signupSchema = z.object({
  email: z.string().email({ message: "Invalid email address" }),
  username: z.string().min(4).max(32),
  password: z.string().min(8),
});

type FormValues = z.infer<typeof signupSchema>;

const Signup = () => {
  const { signup, isPending } = useSignup();
  const navigate = useNavigate();

  const form = useForm<FormValues>({
    resolver: zodResolver(signupSchema),
    defaultValues: {
      email: "",
      username: "",
      password: "",
    },
  });

  const onSubmit = async (values: FormValues) => {
    try {
      await signup(values);
      toast.dismiss();
      navigate(`/${form.getValues().username}`);
    } catch (err) {
      if (axios.isAxiosError(err)) {
        const data = err.response?.data as { message?: string };
        const message = data.message;
        toast.error(message);
      } else {
        toast.error("Something went wrong.");
      }
    }
  };

  return (
    <section className="max-w-md mx-auto">
      <h1 className="mt-[15vh] mb-8 text-3xl font-bold text-center text-neutral-700">
        Create your <em className="text-orange-400">mentee</em> account
      </h1>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <FormField
            control={form.control}
            name="username"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Username</FormLabel>
                <FormControl>
                  <Input placeholder="Enter your username" {...field} required />
                </FormControl>
                <FormDescription>
                  Choose a unique username. Letters, numbers, underscores only.
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Email</FormLabel>
                <FormControl>
                  <Input placeholder="Enter your email address" {...field} required />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="password"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Password</FormLabel>
                <FormControl>
                  <Input placeholder="Enter your password" {...field} required />
                </FormControl>
                <FormDescription>Password must be at least 8 characters long.</FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          <Button type="submit" className="w-full my-4" disabled={isPending}>
            Continue
          </Button>

          <div className="text-[15px] text-center mt-2">
            <span className="text-neutral-700">Already have an account?</span>&nbsp;
            <Link to="/login" className="text-orange-500 font-medium underline">
              Log in
            </Link>
          </div>
        </form>
      </Form>
    </section>
  );
};

export default Signup;
